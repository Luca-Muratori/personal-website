name: Deploy to AWS App Runner

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names my-website || aws ecr create-repository --repository-name my-website
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-website
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Check if App Runner service exists
        id: check-service
        run: |
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='my-website'].ServiceArn" --output text)
          echo "SERVICE_ARN=${SERVICE_ARN}" >> $GITHUB_OUTPUT
          if [ -z "$SERVICE_ARN" ]; then
            echo "EXISTS=false" >> $GITHUB_OUTPUT
          else
            echo "EXISTS=true" >> $GITHUB_OUTPUT
          fi
        
      - name: Create IAM role for App Runner (if needed)
        if: steps.check-service.outputs.EXISTS == 'false'
        id: create-iam-role
        run: |
          ROLE_ARN=$(aws iam get-role --role-name AppRunnerECRAccessRole --query "Role.Arn" --output text 2>/dev/null || echo "")
          if [ -z "$ROLE_ARN" ]; then
            aws iam create-role --role-name AppRunnerECRAccessRole \
              --assume-role-policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "build.apprunner.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }'
            aws iam attach-role-policy --role-name AppRunnerECRAccessRole \
              --policy-arn arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
            # Wait for role to propagate
            sleep 10
          fi
          ROLE_ARN=$(aws iam get-role --role-name AppRunnerECRAccessRole --query "Role.Arn" --output text)
          echo "ROLE_ARN=${ROLE_ARN}" >> $GITHUB_OUTPUT
      
      - name: Create new App Runner service
        if: steps.check-service.outputs.EXISTS == 'false'
        run: |
          aws apprunner create-service \
            --service-name my-website \
            --source-configuration '{
              "ImageRepository": {
                "ImageIdentifier": "${{ steps.login-ecr.outputs.registry }}/my-website:${{ github.sha }}",
                "ImageConfiguration": {
                  "Port": "80"
                },
                "ImageRepositoryType": "ECR"
                },
                "AuthenticationConfiguration": {
                  "RoleArn": "${{ steps.create-iam-role.outputs.ROLE_ARN }}"
              }
            }' \
            --auto-scaling-configuration-arn "$(aws apprunner list-auto-scaling-configurations --query 'AutoScalingConfigurationSummaryList[0].AutoScalingConfigurationArn' --output text)"
          echo "App Runner service created successfully"
      
      - name: Update existing App Runner service
        if: steps.check-service.outputs.EXISTS == 'true'
        run: |
          ROLE_ARN=$(aws iam get-role --role-name AppRunnerECRAccessRole --query "Role.Arn" --output text)
          aws apprunner update-service \
            --service-arn "${{ steps.check-service.outputs.SERVICE_ARN }}" \
            --source-configuration '{
              "ImageRepository": {
                "ImageIdentifier": "${{ steps.login-ecr.outputs.registry }}/my-website:${{ github.sha }}",
                "ImageConfiguration": {
                  "Port": "80"
                },
                "ImageRepositoryType": "ECR"
              },
                "AuthenticationConfiguration": {
                  "RoleArn": "'$ROLE_ARN'"
              }
            }'
          echo "App Runner service updated successfully"